<?php
/**
 * Coffee Framework
 *
 * PHP Version 5.3
 *
 * LICENSE
 *
 * 본 프로그램은 New BSD License 를 기본으로 하고 있지만 약간 다른 제약조건을 가지고 있습니다. 
 * 함께 제공된 license file 인  doc/LICENSE 를 꼭 확인하시길 바랍니다.
 *
 * This Source is subject to the New BSD License with SOME CONSTRAINT that is boudled
 * with this package in the file doc/LICENSE 
 *
 * @category   CF
 * @package    CF_config
 * @author     그네 Jung Sik, Park <ccooffeee@hotmail.com>
 * @copyright  Copyright (c) 2009 - 2012 Jung Sik, Park <ccooffeee@hotmail.com>
 * @license    doc/LICENSE    Based New BSD License
 * @version    $Id: XML.php 6 2012-05-18 ccooffeee Exp $
 */

/** @namespace */
namespace CF\config\writer;

use CF\config\Writer,
	CF\config\Config,
	CF\exception\RuntimeException,
	XMLWriter;


/**
 * @category   CF
 * @package    CF_config
 * @author     그네 Jung Sik, Park <ccooffeee@hotmail.com>
 * @copyright  Copyright (c) 2009 - 2012 Jung Sik, Park <ccooffeee@hotmail.com>
 * @license    doc/LICENSE    Based New BSD License
 */
class XML implements Writer
{

// {{{ properties 
	/** @var XMLWriter */
	private $writer;
// }}}


// {{{ construct (null|string filename, CF\config\Config config [, array option]) 
	/**
	 * following option structure
	 *
	 * <code>
	 * array('comment' => true,		output generated info
	 *		 'indent' => '  ',		indent string
	 *		 'version' => '1.0',	xml version
	 *		 'root' => 'cf-config'	root node
	 *	);
	 * </code>
	 *
	 * @param	null|string			filename
	 * @param	CF\config\Config	config
	 * @param	array				$option
	 * @return	void
	 * @throws	CF\exception\RuntimeException
	*/
	public function __construct($filename, Config $config, $option = array())
	{
		if(!is_array($option)) $option = array();
		$this->initialize($option);

		foreach($config as $section => $data) {
			if(!$data instanceof Config)
                $this->writer->writeElement($section, (string)$data);
			else {
				if(!$this->_hasParentElement($data)) {
						$this->writer->startElement($section);
						$this->_addAttributes($data);
				}

				$this->_appendChild($section, $data);

				if(!$this->_hasParentElement($data))
					$this->writer->endElement();
			}
		}

		$this->finalize();


		if($filename === null) return;

		$result = @file_put_contents($filename, $this->writer->outputMemory());
        
		if($result === false) {
			throw new RuntimeException("Cant write file '$filename'");
		}
	}
// }}}


// {{{ __toString
	/**
	 * __toString magic method
	 *
	 * @return string
	 */
	public function __toString() {
		return (string) $this->writer->outputMemory();
	}
// }}}


// {{{ private methods
	// {{{ void _appendchild (string node, CF\config\Config config) 
	/**
	 * Append child node
	 * Recursive self call
	 *
	 * @param	string				section
	 * @param	CF\config\Config	config
	 * @return	void
	 */
	private function _appendChild ($section, Config $config)
	{
		$type = null;
		foreach($config as $key => $value) {
			if($type === null)
				$type = is_numeric($key) ? 'numeric' : 'string';


			if($type === 'numeric') {
				if($value instanceof Config) {
					$this->writer->startElement($section);
					$this->_addAttributes($value);
					$this->_appendChild($section, $value);
					$this->writer->endElement();
				}
				else
					$this->writer->writeElement($section, (string)$value);
			}
			else {
				if($value instanceof Config) {
					if(!$this->_hasParentElement($value)) {
						$this->writer->startElement($key);
						$this->_addAttributes($value);
					}
					$this->_appendChild($key, $value);
					if(!$this->_hasParentElement($value))
						$this->writer->endElement();
				}
				else 
					$this->writer->writeElement($key, (string)$value);
			}
		}
	}
	// }}}
	// {{{ boolean _hasParentElement (CF\config\Config config) 
	/**
	 * @param	CF\config\Config
	 * @retnrn	boolean
	 */
	private function _hasParentElement (Config $config)
	{
		foreach($config as $key => $value)
			if(is_numeric($key)) return true;

		return false;
	}
	// }}}
	// {{{ void _addAttributes (CF\config\Config data) 
	/**
	 * @param	CF\config\Config config
	 * @return	void
	 */
	private function _addAttributes (Config $data)
	{
		foreach($data->getAttributes() as $name => $value)
			$this->writer->writeAttribute($name, $value);
		if($data->getValue())
			$this->writer->text($data->getValue());
	}
	// }}}
	// {{{ void initialize (array option) 
	/**
	 * @param	array option
	 * @return	void
	 */
	private function initialize (array $option)
	{
		$enableComment = (isset($option['comment']) && $option['comment'] === false) ? false : true; 
		$indentString = isset($option['indent']) ? $option['indent'] : null;
		$version = isset($option['version']) ? $option['version'] : '1.0';
		$rootNode = isset($option['root']) ? $option['root'] : 'cf-config';


		$comment = "Generated by CF_config_Writer - ".date('Y-m-d H:i:s P T');
		$this->writer = new XMLWriter;
		$this->writer->openMemory();
		$this->writer->setIndent(true);
		if($indentString)
			$this->writer->setIndentString($indentString);

		$this->writer->startDocument($version, 'UTF-8');
		if($enableComment)
			$this->writer->writeComment(' '.$comment.' ');
		$this->writer->startElement($rootNode);
	}
	// }}}
	// {{{ void finalize (void) 
	/**
	 * @return void
	 */
	private function finalize ()
	{
		$this->writer->endElement();
		$this->writer->endDocument();
	}
	// }}}
// }}}

}

// vim600: ts=4 sw=4 fdm=marker
?>
